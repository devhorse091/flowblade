diff --git a/duckdb.js b/duckdb.js
index 554090737873f748376d134111599ba3b4d8523d..6a730bd8138b197177f1e437e63e2d39271f92a8 100644
--- a/duckdb.js
+++ b/duckdb.js
@@ -1 +1,24 @@
-module.exports = require(`@duckdb/node-bindings-${process.platform}-${process.arch}/duckdb.node`);
+const getRuntimePlatformArch = () => `${process.platform}-${process.arch}`;
+
+/**
+ * @throw Error if there isn't any available native binding for the current platform/arch.
+ */
+const getNativeNodeBinding = (runtimePlatformArch) => {
+    switch(runtimePlatformArch) {
+        case `linux-x64`:
+            return require('@duckdb/node-bindings-linux-x64/duckdb.node');
+        case 'linux-arm64':
+            return require('@duckdb/node-bindings-linux-arm64/duckdb.node');
+        case 'darwin-arm64':
+            return require('@duckdb/node-bindings-darwin-arm64/duckdb.node');
+        case 'darwin-x64':
+            return require('@duckdb/node-bindings-darwin-x64/duckdb.node');
+        case 'win32-x64':
+            return require('@duckdb/node-bindings-win32-x64/duckdb.node');
+        default:
+            const [platform, arch] = runtimePlatformArch.split('-')
+            throw new Error(`Error loading duckdb native binding: unsupported arch '${arch}' for platform '${platform}'`);
+    }
+}
+
+module.exports = getNativeNodeBinding(getRuntimePlatformArch());
